{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.53.1",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "projectFolderUrl": "https://github.com/mehmet-kozan/pdf-parse/tree/main",
  "kind": "Package",
  "canonicalReference": "pdf-parse!",
  "docComment": "",
  "name": "pdf-parse",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "pdf-parse!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "pdf-parse!DateNode:type",
          "docComment": "/**\n * Consolidated date information gathered from different PDF sources. The PDF 'Info' dictionary contains CreationDate / ModDate and the XMP/XAP metadata can contain several timestamps as well. This structure collects those values (if present) as JavaScript Date objects or null when the property exists but cannot be parsed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DateNode = "
            },
            {
              "kind": "Content",
              "text": "{\n    CreationDate?: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n    ModDate?: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n    XmpCreateDate?: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n    XmpModifyDate?: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n    XmpMetadataDate?: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n    XapCreateDate?: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n    XapModifyDate?: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n    XapMetadataDate?: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/InfoResult.ts",
          "releaseTag": "Public",
          "name": "DateNode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 18
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "pdf-parse!EmbeddedImage:interface",
          "docComment": "/**\n * EmbeddedImage - Normalized representation of an embedded image extracted from the PDF. - `data`: Raw image bytes (e.g. PNG/JPEG) as Uint8Array. Use this for file writing or binary processing. - `dataUrl`: Optional data URL (e.g. \"data:image/png;base64,...\") for directly embedding in <img> src. Storing both lets consumers choose the most convenient form; consider omitting one to save memory. - `name`: Resource name for the image. - `width` / `height`: Dimensions in pixels. - `kind`: ImageKindValue from indicating the pixel format (e.g. GRAYSCALE_1BPP / RGB_24BPP / RGBA_32BPP).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EmbeddedImage "
            }
          ],
          "fileUrlPath": "src/ImageResult.ts",
          "releaseTag": "Public",
          "name": "EmbeddedImage",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!EmbeddedImage#data:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!EmbeddedImage#dataUrl:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dataUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dataUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!EmbeddedImage#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!EmbeddedImage#kind:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "kind: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageKindValue",
                  "canonicalReference": "pdf-parse!ImageKindValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "kind",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!EmbeddedImage#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!EmbeddedImage#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "pdf-parse!getHeader:function(1)",
          "docComment": "/**\n * Perform an HTTP HEAD request to retrieve the file size and verify existence; when `check` is true, fetch a small range and inspect the magic number to confirm the URL points to a valid PDF. If the server does not support range requests, `isPdf` will be set to `false`.\n *\n * @param url - The URL of the PDF file to check. Can be a string or URL object.\n *\n * @param check - When `true`, download a small byte range (first 4 bytes) to validate the file signature by checking for '%PDF' magic bytes. Default: `false`.\n *\n * @returns A Promise that resolves to a HeaderResult object containing the response status, size, headers, and PDF validation result.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getHeader(url: "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "URL",
              "canonicalReference": "!URL:interface"
            },
            {
              "kind": "Content",
              "text": ", check?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HeaderResult",
              "canonicalReference": "pdf-parse!HeaderResult:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/HeaderResult.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "check",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": true
            }
          ],
          "name": "getHeader"
        },
        {
          "kind": "Interface",
          "canonicalReference": "pdf-parse!HeaderResult:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HeaderResult "
            }
          ],
          "fileUrlPath": "src/HeaderResult.ts",
          "releaseTag": "Public",
          "name": "HeaderResult",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!HeaderResult#error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error?: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!HeaderResult#headers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headers?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "headers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!HeaderResult#isPdf:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isPdf?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isPdf",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!HeaderResult#ok:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ok: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ok",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!HeaderResult#size:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!HeaderResult#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "pdf-parse!ImageKindKey:type",
          "docComment": "/**\n * ImageKindKey - Represents the keys of the ImageKind enum (e.g. \"GRAYSCALE_1BPP\", \"RGB_24BPP\", \"RGBA_32BPP\").\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ImageKindKey = "
            },
            {
              "kind": "Content",
              "text": "keyof typeof "
            },
            {
              "kind": "Reference",
              "text": "ImageKind",
              "canonicalReference": "pdf-parse!~ImageKind"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/ImageResult.ts",
          "releaseTag": "Public",
          "name": "ImageKindKey",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "pdf-parse!ImageKindValue:type",
          "docComment": "/**\n * ImageKindValue - Represents the numeric values of the ImageKind enum (e.g. 1, 2, 3).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ImageKindValue = "
            },
            {
              "kind": "Content",
              "text": "(typeof "
            },
            {
              "kind": "Reference",
              "text": "ImageKind",
              "canonicalReference": "pdf-parse!~ImageKind"
            },
            {
              "kind": "Content",
              "text": ")["
            },
            {
              "kind": "Reference",
              "text": "ImageKindKey",
              "canonicalReference": "pdf-parse!ImageKindKey:type"
            },
            {
              "kind": "Content",
              "text": "]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/ImageResult.ts",
          "releaseTag": "Public",
          "name": "ImageKindValue",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "pdf-parse!ImageResult:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ImageResult "
            }
          ],
          "fileUrlPath": "src/ImageResult.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ImageResult",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "pdf-parse!ImageResult:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ImageResult` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(total: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "total",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "pdf-parse!ImageResult#getPageImage:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPageImage(num: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EmbeddedImage",
                  "canonicalReference": "pdf-parse!EmbeddedImage:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getPageImage"
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!ImageResult#pages:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pages: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PageImages",
                  "canonicalReference": "pdf-parse!PageImages:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!ImageResult#total:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "total: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "total",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "pdf-parse!InfoResult:class",
          "docComment": "/**\n * Aggregated information about a PDF document returned by getInfo(). The object contains high-level metadata, outline/bookmark structure, per-page extracted hyperlinks and utility helpers for parsing dates.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class InfoResult "
            }
          ],
          "fileUrlPath": "src/InfoResult.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "InfoResult",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "pdf-parse!InfoResult:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `InfoResult` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(total: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "total",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!InfoResult#fingerprints:member",
              "docComment": "/**\n * An array of document fingerprint strings provided by PDF.js. Useful for caching, de-duplication or identifying a document across runs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fingerprints?: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fingerprints",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "pdf-parse!InfoResult#getDateNode:member(1)",
              "docComment": "/**\n * Collects dates from different sources (Info dictionary and XMP/XAP metadata) and returns them as a DateNode where available. This helps callers compare and choose the most relevant timestamp (for example a creation date vs XMP date).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getDateNode(): "
                },
                {
                  "kind": "Reference",
                  "text": "DateNode",
                  "canonicalReference": "pdf-parse!DateNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getDateNode"
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!InfoResult#info:member",
              "docComment": "/**\n * The PDF 'Info' dictionary. Typical fields include title, author, subject, Creator, Producer and Creation/Modification dates. The exact structure is determined by the PDF and as returned by PDF.js.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "info",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!InfoResult#metadata:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metadata?: "
                },
                {
                  "kind": "Reference",
                  "text": "Metadata",
                  "canonicalReference": "pdfjs-dist!Metadata:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "metadata",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!InfoResult#outline:member",
              "docComment": "/**\n * Optional document outline (bookmarks). When present this is the hierarchical navigation structure which viewers use for quick access.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outline?: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "OutlineNode",
                  "canonicalReference": "pdf-parse!OutlineNode:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "outline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!InfoResult#pages:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pages: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PageLinkResult",
                  "canonicalReference": "pdf-parse!PageLinkResult:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!InfoResult#permission:member",
              "docComment": "/**\n * Permission flags for the document as returned by PDF.js (or null). These flags indicate capabilities such as printing, copying and other restrictions imposed by the PDF security settings.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "permission?: "
                },
                {
                  "kind": "Content",
                  "text": "number[] | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "permission",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!InfoResult#total:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "total: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "total",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "pdf-parse!OutlineNode:interface",
          "docComment": "/**\n * Node representing a single item in the PDF outline (bookmarks). This mirrors the structure returned by PDF.js' getOutline() API.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface OutlineNode "
            }
          ],
          "fileUrlPath": "src/InfoResult.ts",
          "releaseTag": "Public",
          "name": "OutlineNode",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!OutlineNode#bold:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bold: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "bold",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!OutlineNode#color:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8ClampedArray",
                  "canonicalReference": "!Uint8ClampedArray:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!OutlineNode#count:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "count?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "count",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!OutlineNode#dest:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dest: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!OutlineNode#italic:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "italic: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "italic",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!OutlineNode#items:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "items: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!OutlineNode#newWindow:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newWindow?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "newWindow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!OutlineNode#title:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!OutlineNode#unsafeUrl:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unsafeUrl?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "unsafeUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!OutlineNode#url:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "pdf-parse!PageImages:interface",
          "docComment": "/**\n * PageImages - Represents all embedded images found on a single PDF page. - pageNumber: 1-based page index. - images: Array of EmbeddedImage objects for this page.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PageImages "
            }
          ],
          "fileUrlPath": "src/ImageResult.ts",
          "releaseTag": "Public",
          "name": "PageImages",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!PageImages#images:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "images: "
                },
                {
                  "kind": "Reference",
                  "text": "EmbeddedImage",
                  "canonicalReference": "pdf-parse!EmbeddedImage:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "images",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!PageImages#pageNumber:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pageNumber: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pageNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "pdf-parse!PageLinkResult:type",
          "docComment": "/**\n * Per-page link extraction result. - pageNumber: the physical page index (1-based) within the PDF document. - pageLabel: optional printed page label shown by PDF viewers (e.g. \"iii\", \"1\", \"A-1\"); this can differ from the physical page number and may be undefined when the document does not provide labels. - links: array of text->URL mappings that were found/overlaid on the page. - width/height: page dimensions in PDF units for the viewport used.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PageLinkResult = "
            },
            {
              "kind": "Content",
              "text": "{\n    pageNumber: number;\n    pageLabel?: string | null;\n    links: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n        text: string;\n        url: string;\n    }>;\n    width: number;\n    height: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/InfoResult.ts",
          "releaseTag": "Public",
          "name": "PageLinkResult",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "pdf-parse!PageTableResult:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PageTableResult "
            }
          ],
          "fileUrlPath": "src/TableResult.ts",
          "releaseTag": "Public",
          "name": "PageTableResult",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!PageTableResult#num:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "num: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "num",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!PageTableResult#tables:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tables: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tables",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "pdf-parse!PageTextResult:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PageTextResult "
            }
          ],
          "fileUrlPath": "src/TextResult.ts",
          "releaseTag": "Public",
          "name": "PageTextResult",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!PageTextResult#num:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "num: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "num",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!PageTextResult#text:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "pdf-parse!ParseParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParseParameters "
            }
          ],
          "fileUrlPath": "src/ParseParameters.ts",
          "releaseTag": "Public",
          "name": "ParseParameters",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#cellSeparator:member",
              "docComment": "/**\n * String inserted between text items on the same line when a sufficiently large horizontal gap is detected. Typically used to emulate a cell/column separator (for example, \"\\\\t\" for tabs). Default: `'\\t'`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cellSeparator?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cellSeparator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#cellThreshold:member",
              "docComment": "/**\n * Horizontal distance threshold to decide when two text items on the same baseline should be treated as separate cells. Larger value produces fewer (wider) cells; smaller value creates more cell breaks. Default: `7`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cellThreshold?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cellThreshold",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#desiredWidth:member",
              "docComment": "/**\n * Desired screenshot width in pixels. When set, the scale option is ignored. Default: `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "desiredWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "desiredWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#disableNormalization:member",
              "docComment": "/**\n * When true, text normalization is NOT performed in the worker thread. For plain text extraction, normalizing in the worker (false) is usually recommended. Default: `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disableNormalization?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disableNormalization",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#first:member",
              "docComment": "/**\n * Parse the first N pages (pages 1..N). Ignored when `partial` is provided. If both `first` and `last` are set, they define an explicit inclusive page range (first..last) and this \"first N\" semantics is ignored. Default: `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "first?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "first",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#imageBuffer:member",
              "docComment": "/**\n * Applies to both getImage() and getScreenshot(): include the image as a binary buffer. Default: `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageBuffer?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "imageBuffer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#imageDataUrl:member",
              "docComment": "/**\n * Applies to both getImage() and getScreenshot(): include the image as a base64 data URL string. Default: `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageDataUrl?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "imageDataUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#imageThreshold:member",
              "docComment": "/**\n * Minimum image dimension (in pixels) for width or height. When set, images where width OR height are below or equal this value will be ignored by `getImage()`. Useful for excluding tiny decorative or tracking images. Default: `80`. Disable: `0`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageThreshold?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "imageThreshold",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#includeMarkedContent:member",
              "docComment": "/**\n * Include marked content items in the items array of TextContent to capture PDF \"marked content\". Enables tags (MCID, role/props) and structural/accessibility information useful for mapping text ↔ structure. For plain text extraction it's usually false (trade-off: larger output). Default: `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "includeMarkedContent?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "includeMarkedContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#itemJoiner:member",
              "docComment": "/**\n * Optional string used to join text items when returning a page's text. If provided, this value is used instead of the default empty-string joining behavior. Default: `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemJoiner?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "itemJoiner",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#last:member",
              "docComment": "/**\n * Parse the last N pages (pages total-N+1..total). Ignored when `partial` is provided. If both `first` and `last` are set, they define an explicit inclusive page range (first..last) and this \"last N\" semantics is ignored. Default: `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "last?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "last",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#lineEnforce:member",
              "docComment": "/**\n * Enforce logical line breaks by inserting a newline when the vertical distance between text items exceeds `lineThreshold`. Useful to preserve paragraph/line structure when text items are emitted as separate segments. Default: `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineEnforce?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lineEnforce",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#lineThreshold:member",
              "docComment": "/**\n * Threshold to decide whether nearby text items belong to different lines. Larger values make the parser more likely to start a new line between items. Default: `4.6`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineThreshold?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lineThreshold",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#pageJoiner:member",
              "docComment": "/**\n * Optional string appended at the end of each page's extracted text to mark page boundaries. Supports placeholders `page_number` and `total_number` which are substituted accordingly. If omitted or empty, no page boundary marker is added. Default: `'\\n-- page_number of total_number --'`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pageJoiner?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pageJoiner",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#parseHyperlinks:member",
              "docComment": "/**\n * Attempt to detect and include hyperlink annotations (e.g. URLs) associated with text. Detected links are formatted as Markdown inline links (for example: [text](https://example.com)). Default: `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "parseHyperlinks?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "parseHyperlinks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#parsePageInfo:member",
              "docComment": "/**\n * Collect per-page metadata such as embedded links, title, pageLabel, and dimensions; ISBN, DOI, abstract, and references are work in progress when getInfo() is used. Default: `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "parsePageInfo?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "parsePageInfo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#partial:member",
              "docComment": "/**\n * Array of page numbers to parse. When provided, only these pages will be parsed and returned in the same order. Example: [1, 3, 5]. Parse only one page: [7]. Default: `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "partial?: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "partial",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!ParseParameters#scale:member",
              "docComment": "/**\n * Screenshot scale factor: use 1 for the original size, 1.5 for a 50% larger image, etc. Default: `1`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scale?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "pdf-parse!PDFParse:class",
          "docComment": "/**\n * Loads PDF documents and exposes helpers for text, image, table, metadata, and screenshot extraction.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PDFParse "
            }
          ],
          "fileUrlPath": "src/PDFParse.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "PDFParse",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "pdf-parse!PDFParse:constructor(1)",
              "docComment": "/**\n * Create a new parser with `DocumentInitParameters`. Converts Node.js `Buffer` data to `Uint8Array` automatically and ensures a default verbosity level.\n *\n * @param options - Initialization parameters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options: "
                },
                {
                  "kind": "Reference",
                  "text": "DocumentInitParameters",
                  "canonicalReference": "pdfjs-dist!DocumentInitParameters:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "pdf-parse!PDFParse#destroy:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destroy(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "destroy"
            },
            {
              "kind": "Method",
              "canonicalReference": "pdf-parse!PDFParse#getHeader:member(1)",
              "docComment": "/**\n * Perform an HTTP HEAD request to retrieve the file size and verify existence; when `check` is true, fetch a small range and inspect the magic number to confirm the URL points to a valid PDF.\n *\n * @param check - When `true`, download a small byte range to validate the file signature. Default: `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getHeader(check?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HeaderResult",
                  "canonicalReference": "pdf-parse!HeaderResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "check",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getHeader"
            },
            {
              "kind": "Method",
              "canonicalReference": "pdf-parse!PDFParse#getImage:member(1)",
              "docComment": "/**\n * Extract embedded images from requested pages.\n *\n * Behavior notes: - Pages are selected according to ParseParameters (partial, first, last). - Images smaller than `params.imageThreshold` (width OR height) are skipped. - Returned ImageResult contains per-page PageImages; each image entry includes: - data: Uint8Array (present when params.imageBuffer === true) - dataUrl: string (present when params.imageDataUrl === true) - width, height, kind, name - Works in both Node.js (canvas.toBuffer) and browser (canvas.toDataURL) environments.\n *\n * @param params - ParseParameters controlling page selection, thresholds and output format.\n *\n * @returns Promise<ImageResult> with extracted images grouped by page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getImage(params?: "
                },
                {
                  "kind": "Reference",
                  "text": "ParseParameters",
                  "canonicalReference": "pdf-parse!ParseParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageResult",
                  "canonicalReference": "pdf-parse!ImageResult:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getImage"
            },
            {
              "kind": "Method",
              "canonicalReference": "pdf-parse!PDFParse#getInfo:member(1)",
              "docComment": "/**\n * Load document-level metadata (info, outline, permissions, page labels) and optionally gather per-page link details.\n *\n * @param params - Parse options; set `parsePageInfo` to collect per-page metadata described in `ParseParameters`.\n *\n * @returns Aggregated document metadata in an `InfoResult`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getInfo(params?: "
                },
                {
                  "kind": "Reference",
                  "text": "ParseParameters",
                  "canonicalReference": "pdf-parse!ParseParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "InfoResult",
                  "canonicalReference": "pdf-parse!InfoResult:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getInfo"
            },
            {
              "kind": "Method",
              "canonicalReference": "pdf-parse!PDFParse#getScreenshot:member(1)",
              "docComment": "/**\n * Render pages to raster screenshots.\n *\n * Behavior notes: - Pages are selected according to ParseParameters (partial, first, last). - Use params.scale for zoom; if params.desiredWidth is specified it takes precedence. - Each ScreenshotResult page contains: - data: Uint8Array (when params.imageBuffer === true) - dataUrl: string (when params.imageDataUrl === true) - pageNumber, width, height, scale - Works in both Node.js (canvas.toBuffer) and browser (canvas.toDataURL) environments.\n *\n * @param parseParams - ParseParameters controlling page selection and render options.\n *\n * @returns Promise<ScreenshotResult> with rendered page images.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScreenshot(parseParams?: "
                },
                {
                  "kind": "Reference",
                  "text": "ParseParameters",
                  "canonicalReference": "pdf-parse!ParseParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ScreenshotResult",
                  "canonicalReference": "pdf-parse!ScreenshotResult:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "parseParams",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getScreenshot"
            },
            {
              "kind": "Method",
              "canonicalReference": "pdf-parse!PDFParse#getTable:member(1)",
              "docComment": "/**\n * Detect and extract tables from pages by analysing vector drawing operators, then populate cells with text.\n *\n * Behavior notes: - Scans operator lists for rectangles/lines that form table grids (uses PathGeometry and LineStore). - Normalizes detected geometry and matches positioned text to table cells. - Honors ParseParameters for page selection.\n *\n * @param params - ParseParameters controlling which pages to analyse (partial/first/last).\n *\n * @returns Promise<TableResult> containing discovered tables per page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTable(params?: "
                },
                {
                  "kind": "Reference",
                  "text": "ParseParameters",
                  "canonicalReference": "pdf-parse!ParseParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TableResult",
                  "canonicalReference": "pdf-parse!TableResult:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getTable"
            },
            {
              "kind": "Method",
              "canonicalReference": "pdf-parse!PDFParse#getText:member(1)",
              "docComment": "/**\n * Extract plain text for each requested page, optionally enriching hyperlinks and enforcing line or cell separators.\n *\n * @param params - Parse options controlling pagination, link handling, and line/cell thresholds.\n *\n * @returns A `TextResult` containing page-wise text and a concatenated document string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getText(params?: "
                },
                {
                  "kind": "Reference",
                  "text": "ParseParameters",
                  "canonicalReference": "pdf-parse!ParseParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TextResult",
                  "canonicalReference": "pdf-parse!TextResult:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getText"
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!PDFParse.isNodeJS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static get isNodeJS(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isNodeJS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!PDFParse#progress:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "progress: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        loaded: number;\n        total: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "progress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "pdf-parse!PDFParse.setWorker:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static setWorker(workerSrc?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "workerSrc",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "setWorker"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "pdf-parse!Screenshot:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Screenshot "
            }
          ],
          "fileUrlPath": "src/ScreenshotResult.ts",
          "releaseTag": "Public",
          "name": "Screenshot",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!Screenshot#data:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!Screenshot#dataUrl:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dataUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dataUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!Screenshot#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!Screenshot#pageNumber:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pageNumber: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pageNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!Screenshot#scale:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pdf-parse!Screenshot#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "pdf-parse!ScreenshotResult:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ScreenshotResult "
            }
          ],
          "fileUrlPath": "src/ScreenshotResult.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ScreenshotResult",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "pdf-parse!ScreenshotResult:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ScreenshotResult` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(total: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "total",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!ScreenshotResult#pages:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pages: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Screenshot",
                  "canonicalReference": "pdf-parse!Screenshot:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!ScreenshotResult#total:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "total: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "total",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "pdf-parse!TableResult:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TableResult "
            }
          ],
          "fileUrlPath": "src/TableResult.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "TableResult",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "pdf-parse!TableResult:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `TableResult` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(total: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "total",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!TableResult#mergedTables:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mergedTables: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "mergedTables",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!TableResult#pages:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pages: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PageTableResult",
                  "canonicalReference": "pdf-parse!PageTableResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!TableResult#total:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "total: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "total",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "pdf-parse!TextResult:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TextResult "
            }
          ],
          "fileUrlPath": "src/TextResult.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "TextResult",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "pdf-parse!TextResult:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `TextResult` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(total: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "total",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "pdf-parse!TextResult#getPageText:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPageText(num: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getPageText"
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!TextResult#pages:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pages: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PageTextResult",
                  "canonicalReference": "pdf-parse!PageTextResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!TextResult#text:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "pdf-parse!TextResult#total:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "total: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "total",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        }
      ]
    }
  ]
}
